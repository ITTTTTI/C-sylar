// void LogFormatter::init()
// {
//     //str,format,type
//     std::vector<std::tuple<std::string,std::string,int>> vec;
//     std::string nstr;
//     for(size_t i=0;i<m_pattern.size();++i)
//     {
//         if(m_pattern[i]!='%'){
//                nstr.append(1,m_pattern[i]);
//                continue;
//             }
//         if((i+1)<m_pattern.size())
//         {
//             if(m_pattern[i+1]=='%'){
//                 nstr.append(1,'%');
//                 continue;
//             }
//         }
//         size_t n=i+1;
//         int fmt_status=0;
//         size_t fmt_begin=0;

//         std::string str;
//         std::string fmt;
//         while(n<m_pattern.size())
//         {
//             if(isspace(m_pattern[n])){
//                 break;
//             }
//             if(fmt_status==0)
//             {
//                 if(m_pattern[n]=='{'){
//                     str =m_pattern.substr(i+1,n-i-1);
//                     fmt_status=1;
//                     fmt_begin =n;
//                     ++n;
//                     continue;
//                 }
//             }
//             if(fmt_status==1)
//             {
//                 if(m_pattern[n]=='}'){
//                     fmt=m_pattern.substr(fmt_begin+1,n-fmt_begin-1);
//                     fmt_status=2;
//                     break;
//                 }

//             }   
//         }

//           if(fmt_status == 0) {
//             if(!nstr.empty()) {
//                 vec.push_back(std::make_tuple(nstr, std::string(), 0));
//             }
//             str =m_pattern.substr(i+1,n-i-1);
//             vec.push_back(std::make_tuple(str, fmt, 1));
//             i = n;
//         } else if(fmt_status == 1) {
//             std::cout << "pattern parse error: " << m_pattern << " - " << m_pattern.substr(i) << std::endl;
//             vec.push_back(std::make_tuple("<<pattern_error>>", fmt, 0));
//         }else if(fmt_status == 2) {
//             if (!nstr.empty()) {
//                 vec.push_back(std::make_tuple(nstr, std::string(), 0));
//             }
//         }
//     }
       

//   static std::map<std::string ,std::function<FormatItem::ptr(const std::string& str)>> s_format_items={
// #define XX(str,C) \
//    {#str, [](const std::string& fmt) { return FormatItem::ptr(new C(fmt));}}
   
//    XX(m, MessageFormatItem),
//    XX(p, LevelFormatItem),
//    XX(r, ElapseFormatItem),
//    XX(c, NameFormatItem),
//    XX(t, ThreadIdFormatItem),
//    XX(n, NewLineFormatItem),
//    XX(d, DateTimeFormatItem),
//    XX(f, FileNameFormatItem),
//    XX(l, LineFormatItem),
//    XX(T, TabFormatItem),
//    XX(F, FiberIdFormatItem),
// #undef XX
// };
    
//     for(auto& i : vec)
//     {
//         if(std::get<2>(i)==0)
//         {
//             m_items.push_back(FormatItem::ptr(new MessageFormatItem(std::get<0>(i))));
//         }else
//         {
//              auto it =s_format_items.find(std::get<0>(i));
//              if(it ==s_format_items.end())
//              {
//                 m_items.push_back(FormatItem::ptr(new StringFormatItem("<<error_format %"+std::get<0>(i)+">>")));
//              }else
//              {
//                  m_items.push_back(it->second(std::get<1>(i)));
//              }
//         }
//         std::cout<<std::get<0>(i)<< "-"<<std::get<1>(i)<<"-"<<std::get<2>(i)<<std::endl;
//     }
// }